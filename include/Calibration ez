#include <iostream>
#include <thread>
#include <stdexcept> // For std::runtime_error

#include <ethercat-lib/ethercat_lib.h> // Assuming ethercat-lib is in your include path

using namespace ethercat_lib;

// Configuration (Adapt these to your setup)
const std::string INTERFACE_NAME = "eth0"; // Your EtherCAT network interface
const uint16_t EPOS_NODE_ID = 1;             // The Node ID of your EPOS4

// Function to perform EPOS4 calibration
bool calibrateEpos(EthercatMaster& master, EthercatDevice& eposDevice) {
    try {
        std::cout << "Starting EPOS4 Calibration..." << std::endl;

        // 1. Set Operation Mode to CSP (Cyclic Synchronous Position)
        std::cout << "Setting operation mode to CSP..." << std::endl;
        eposDevice.writeSdo<uint8_t>(0x6060, 0x00, 8); // CSP mode

        // 2. Enable the Drive (Controlword Sequence)
        std::cout << "Enabling drive..." << std::endl;
        eposDevice.writeSdo<uint16_t>(0x6040, 0x00, 0x06); // Shutdown
        eposDevice.writeSdo<uint16_t>(0x6040, 0x00, 0x0F); // Enable operation

        // 3. Move to End Switch (Negative Velocity)
        std::cout << "Moving to end switch..." << std::endl;
        eposDevice.writeSdo<int32_t>(0x60FF, 0x00, -500); // Target velocity (adjust value)

        // **REPLACE THIS WITH YOUR END SWITCH LOGIC**
        //   This is a placeholder!  You *must* read a PDO or SDO to check
        //   the status of your end switch.  This example just waits a fixed time.

        std::this_thread::sleep_for(std::chrono::seconds(5)); // <<-- REPLACE THIS!

        // 4. Stop Motion and Reset Position
        std::cout << "End switch reached (or timeout). Stopping and resetting..." << std::endl;
        eposDevice.writeSdo<int32_t>(0x60FF, 0x00, 0);     // Target velocity = 0 (Stop)
        std::this_thread::sleep_for(std::chrono::milliseconds(200)); // Wait for motor to stop

        eposDevice.writeSdo<int32_t>(0x607A, 0x00, 0);     // Target position = 0

        std::cout << "Calibration completed successfully." << std::endl;
        return true;

    } catch (const std::runtime_error& e) {
        std::cerr << "Calibration error: " << e.what() << std::endl;
        return false;
    }
}

int main() {
    try {
        // 1. Initialize EtherCAT Master
        EthercatMaster master(INTERFACE_NAME);
        master.init();

        // 2. Find the EPOS4 Device
        EthercatDevice epos(master, EPOS_NODE_ID);
        if (!epos.isFound()) {
            throw std::runtime_error("EPOS4 device not found!");
        }

        // 3. Calibrate the EPOS4
        if (calibrateEpos(master, epos)) {
            std::cout << "EPOS4 calibration finished successfully." << std::endl;
        } else {
            std::cerr << "EPOS4 calibration failed." << std::endl;
        }

        // 4. Shutdown (Disable Drive)
        std::cout << "Disabling drive..." << std::endl;
        epos.writeSdo<uint16_t>(0x6040, 0x00, 0x06); // Shutdown
        master.stop();

    } catch (const std::runtime_error& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
